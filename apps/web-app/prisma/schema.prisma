// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Attribute {
  id         Int      @id @default(autoincrement())
  templateId String? // LEGACY 
  label      String? // LEGACY
  value      String
  required   Boolean? // LEGACY

  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?

  propertyFeature   PropertyFeature? @relation(fields: [propertyFeatureId], references: [id])
  propertyFeatureId Int?

  templateAttribute   TemplateAttribute? @relation(fields: [templateAttributeId], references: [id])
  templateAttributeId String?

  notes String? // INCORRECT - use feature notes
}

enum AttributeType {
  TEXT
  SELECT
  NUMBER
}

model Chat {
  id       Int       @id @default(autoincrement())
  messages Message[]

  task   Task? @relation(fields: [taskId], references: [id])
  taskId Int?  @unique

  guestTask   GuestTask? @relation(fields: [guestTaskId], references: [id])
  guestTaskId Int?       @unique

  threadId String?

  asstEnabled Boolean?
}

model Group {
  id       Int    @id @default(autoincrement())
  publicId String @unique @map("public_id") @db.VarChar(14)
  name     String

  // legacy
  members User[]

  users   GroupMembership[]
  invites Invite[]

  tasks Task[]

  properties Property[]

  proProperties PropertyPro[]

  vendors  Vendor[]
  services Service[]
  type     GroupType?

  referral Referral?
}

model GroupMembership {
  id      Int      @id @default(autoincrement())
  role    UserRole
  // TODO:make both of these required
  user    User?    @relation(fields: [userId], references: [id])
  userId  Int?
  group   Group?   @relation(fields: [groupId], references: [id])
  groupId Int?

  assignments GroupMemberAssignment[]
}

model GroupMemberAssignment {
  id Int @id @default(autoincrement())

  groupMembership   GroupMembership @relation(fields: [groupMembershipId], references: [id])
  groupMembershipId Int

  task   Task @relation(fields: [taskId], references: [id])
  taskId Int
}

enum GroupType {
  HOMEOWNER
  CONCIERGE
  PRO
}

model Guest {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @map("public_id") @db.VarChar(14)
  createdAt DateTime?

  tasks    GuestTask[] @relation("createdBy")
  messages Message[] // TODO: incorrect?
}

model GuestTask {
  id       Int    @id @default(autoincrement())
  publicId String @unique @map("public_id") @db.VarChar(14)
  title    String

  createdBy   Guest? @relation("createdBy", fields: [createdById], references: [id])
  createdById Int? // TODO: required

  createdAt DateTime @default(now())

  chat Chat? // TODO: required

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Image {
  id   Int     @id @default(autoincrement())
  path String
  alt  String?

  propertyFeature   PropertyFeature? @relation(fields: [propertyFeatureId], references: [id], onDelete: Cascade)
  propertyFeatureId Int?

  task   Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId Int?
}

model Invite {
  id        Int          @id @default(autoincrement())
  publicId  String       @unique @map("public_id") @db.VarChar(14)
  email     String
  invitedAt DateTime
  role      UserRole
  status    InviteStatus

  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?
}

enum InviteStatus {
  PENDING
  EXPIRED
  ACCEPTED
}

model Location {
  id Int @id @default(autoincrement())

  lat Decimal
  lng Decimal

  // [viewportNeLat,viewportNeLng,viewportSwLat,viewportSwLng]
  viewport Decimal[]

  propertyId Int?       @unique
  properties Property[]
}

model Message {
  id        Int      @id @default(autoincrement())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int
  createdAt DateTime

  author   User? @relation(fields: [authorId], references: [id])
  authorId Int?

  guestAuthor   Guest? @relation(fields: [guestAuthorId], references: [id])
  guestAuthorId Int?

  text String
  type MessageType @default(USER)
}

enum MessageType {
  USER
  SYSTEM
  ASSISTANT
}

model Notification {
  id    Int                @id @default(autoincrement())
  label String
  event String             @unique
  type  NotificationType   @default(EMAIL)
  users UserNotification[]
}

enum NotificationType {
  EMAIL
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  NONE
}

model Property {
  id            Int     @id @default(autoincrement())
  publicId      String  @unique @map("public_id") @db.VarChar(14)
  nickName      String?
  streetAddress String?
  place         String?
  state         String?
  zipCode       String?

  googlePlaceId String?
  unit          String?

  tasks    Task[]
  features PropertyFeature[]

  // legacy
  userGroup   Group? @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  userGroupId Int?

  members PropertyMembership[]
  invites Invite[]

  pros PropertyPro[]

  attributes Attribute[]

  // createdAt Date?
  location   Location? @relation(fields: [locationId], references: [id])
  locationId Int?
}

model PropertyFeature {
  id         Int       @id @default(autoincrement())
  title      String
  slug       String?
  templateId Int? // Legacy 
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId Int?
  category   String?

  tasks TaskFeature[]

  attributes Attribute[]

  templateFeature   TemplateFeature? @relation(fields: [templateFeatureId], references: [id])
  templateFeatureId Int?

  notes String?

  images Image[]
}

model PropertyMembership {
  id         Int       @id @default(autoincrement())
  role       UserRole
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int?
}

model PropertyPro {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  proGroup   Group    @relation(fields: [proGroupId], references: [id])
  proGroupId Int

  // status: "recommended" | "accepted" | "rejected"

  tasks Task[] // unused?
}

model Referral {
  id       Int     @id @default(autoincrement())
  publicId String  @unique @map("public_id") @db.VarChar(14)
  slug     String?

  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?   @unique

  task   Task? @relation(fields: [taskId], references: [id])
  taskId Int?  @unique
}

model Service {
  id    Int     @id @default(autoincrement())
  name  String
  icon  String  @default("handyman")
  color String?
  tasks Task[]

  vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId Int?

  userGroup   Group? @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  userGroupId Int?
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Task {
  id         Int      @id @default(autoincrement())
  publicId   String   @unique @map("public_id") @db.VarChar(14)
  title      String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId Int

  createdBy   User? @relation("createdBy", fields: [createdById], references: [id])
  createdById Int?

  // legacy
  assignedTo   User? @relation("assignedTo", fields: [assignedToId], references: [id])
  assignedToId Int?

  service   Service? @relation(fields: [serviceId], references: [id])
  serviceId Int?

  createdAt   DateTime  @default(now())
  // TODO: add updatedAt   DateTime?
  completedAt DateTime?
  dueAt       DateTime?
  scheduledAt DateTime?

  // legacy
  vendor   Vendor? @relation(fields: [vendorId], references: [id])
  vendorId Int?

  history TaskEvent[]

  frequency TaskFrequency?
  notes     String?

  status Status @default(NOT_STARTED)

  userGroups  Group? @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  userGroupId Int?

  // legacy?
  User   User? @relation(fields: [userId], references: [id])
  userId Int?

  propertyPro   PropertyPro? @relation(fields: [propertyProId], references: [id])
  propertyProId Int?

  groupAssignments GroupMemberAssignment[]

  chat Chat?

  priority Priority? @default(NONE)

  referral Referral?

  taskFeatures TaskFeature[]

  images Image[]
}

model TaskFeature {
  id                Int             @id @default(autoincrement())
  task              Task            @relation(fields: [taskId], references: [id])
  taskId            Int
  propertyFeature   PropertyFeature @relation(fields: [propertyFeatureId], references: [id])
  propertyFeatureId Int
}

model TaskEvent {
  id          Int      @id @default(autoincrement())
  eventDate   DateTime @default(now())
  description String
  Task        Task?    @relation(fields: [taskId], references: [id])
  taskId      Int?
  // TODO: add an optional type value here to allow for filtering on events in the history
}

enum TaskFrequency {
  NO_REPEAT
  MONTHLY
  THREE_MONTHS
  FOUR_MONTHS
  SIX_MONTHS
  TWELVE_MONTHS
}

model TemplateFeature {
  id            Int            @id @default(autoincrement())
  title         String
  slug          String?
  icon          String?
  templateTasks TemplateTask[]
  category      String?

  features PropertyFeature[]

  templateAttributes TemplateAttribute[]
}

model TemplateAttribute {
  id       String        @id @unique
  label    String
  required Boolean?
  type     AttributeType @default(TEXT)

  attributes Attribute[]

  templateFeature   TemplateFeature? @relation(fields: [templateFeatureId], references: [id])
  templateFeatureId Int?

  placeholder String?
}

model TemplateTask {
  id                Int              @id @default(autoincrement())
  title             String
  frequency         TaskFrequency
  templateFeature   TemplateFeature? @relation(fields: [propertyFeatureId], references: [id])
  propertyFeatureId Int?
}

model Totp {
  id String @id @default(uuid())

  hash     String  @unique
  active   Boolean @default(true)
  attempts Int     @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime? @default(now())
}

model User {
  id       Int    @id @default(autoincrement())
  publicId String @unique @map("public_id") @db.VarChar(14)

  email         String    @unique
  username      String    @unique
  role          UserRole  @default(USER)
  name          String?
  password      Password?
  emailVerified Boolean   @default(false)
  imageUrl      String?
  createdAt     DateTime?
  lastLogin     DateTime?

  tasks Task[] @relation("createdBy")

  notifications UserNotification[]

  // legacy
  userGroup   Group? @relation(fields: [userGroupId], references: [id], onDelete: SetNull)
  userGroupId Int?

  // new
  // TODO: rename to groupsUser?
  groups GroupMembership[]

  properties PropertyMembership[]

  // TODO: remove
  clerkId String? @unique

  assignments Task[] @relation("assignedTo")

  allTasks Task[]

  messages Message[]

  guestTasks GuestTask[]
}

model UserNotification {
  id       Int     @id @default(autoincrement())
  isActive Boolean @default(false)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  notification   Notification? @relation(fields: [notificationId], references: [id])
  notificationId Int?
}

enum UserRole {
  SUPER_ADMIN
  GROUP_ADMIN
  USER
}

model Vendor {
  id       Int       @id @default(autoincrement())
  name     String
  phone    String?
  email    String?
  services Service[]
  Task     Task[]

  userGroup   Group? @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  userGroupId Int?
}

// src: epic-stack
model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// When it's safe to delete this verification
  expiresAt DateTime?

  /// Use for sender/receiver handshake
  hash String?

  email String?

  inviteId String?

  @@unique([target, type])
}
